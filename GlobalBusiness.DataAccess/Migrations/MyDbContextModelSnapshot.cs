// <auto-generated />
using System;
using GlobalBusiness.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GlobalBusiness.DataAccess.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GlobalBusiness.Core.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("GlobalBusiness.Core.Entities.NavigationMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ElementIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentMenuId")
                        .HasColumnType("int");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("AspNetNavigationMenu");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 100,
                            ElementIdentifier = "auth_control",
                            Icon = "vpn_key",
                            Name = "Access Control",
                            Visible = true
                        },
                        new
                        {
                            Id = 2,
                            ActionName = "Index",
                            ControllerName = "Roles",
                            ElementIdentifier = "roles",
                            Name = "Roles",
                            ParentMenuId = 1,
                            Visible = true
                        },
                        new
                        {
                            Id = 3,
                            ActionName = "Create",
                            ControllerName = "Roles",
                            ElementIdentifier = "roles",
                            Name = "Create Role",
                            ParentMenuId = 1,
                            Visible = false
                        },
                        new
                        {
                            Id = 4,
                            ActionName = "Edit",
                            ControllerName = "Roles",
                            ElementIdentifier = "roles",
                            Name = "Edit Role",
                            ParentMenuId = 1,
                            Visible = false
                        },
                        new
                        {
                            Id = 5,
                            ActionName = "Delete",
                            ControllerName = "Roles",
                            ElementIdentifier = "roles",
                            Name = "Delete Role",
                            ParentMenuId = 1,
                            Visible = false
                        },
                        new
                        {
                            Id = 6,
                            ActionName = "EditRolePermission",
                            ControllerName = "Roles",
                            ElementIdentifier = "roles",
                            Name = "Edit Role Permission",
                            ParentMenuId = 1,
                            Visible = false
                        });
                });

            modelBuilder.Entity("GlobalBusiness.Core.Entities.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AvgProfitMonth")
                        .HasColumnType("float");

                    b.Property<double>("BinaryIncome")
                        .HasColumnType("float");

                    b.Property<decimal>("CappingMonthlyLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("FromPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Period")
                        .HasColumnType("tinyint");

                    b.Property<double>("ReferralIncome")
                        .HasColumnType("float");

                    b.Property<decimal>("ToPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("TotalProfit")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Package");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvgProfitMonth = 15.73,
                            BinaryIncome = 10.0,
                            CappingMonthlyLimit = 5000m,
                            Description = "an appropriate opportunity for beginners starting their own business.Find suitable investment with Basic.",
                            FromPrice = 100.00m,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Moon",
                            Period = (byte)24,
                            ReferralIncome = 7.0,
                            ToPrice = 999.00m,
                            TotalProfit = 200.0
                        },
                        new
                        {
                            Id = 2,
                            AvgProfitMonth = 18.899999999999999,
                            BinaryIncome = 10.0,
                            CappingMonthlyLimit = 10000m,
                            Description = "for those who have experienced investing before and have started a new way towards a more prosperous investment.",
                            FromPrice = 1000.00m,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Earth",
                            Period = (byte)24,
                            ReferralIncome = 8.0,
                            ToPrice = 9999.00m,
                            TotalProfit = 220.0
                        },
                        new
                        {
                            Id = 3,
                            AvgProfitMonth = 22.030000000000001,
                            BinaryIncome = 10.0,
                            CappingMonthlyLimit = 20000m,
                            Description = "an appropriate chance for more profits with more potential facilities.",
                            FromPrice = 10000.00m,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Sun",
                            Period = (byte)24,
                            ReferralIncome = 9.0,
                            ToPrice = 24999.00m,
                            TotalProfit = 240.0
                        },
                        new
                        {
                            Id = 4,
                            AvgProfitMonth = 25.170000000000002,
                            BinaryIncome = 10.0,
                            CappingMonthlyLimit = 999999999m,
                            Description = "the last package and the best choice for a worthwhile investment.",
                            FromPrice = 25000.00m,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Star",
                            Period = (byte)24,
                            ReferralIncome = 10.0,
                            ToPrice = -1m,
                            TotalProfit = 260.0
                        });
                });

            modelBuilder.Entity("GlobalBusiness.Core.Entities.ReferralLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReferralType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ReferralLinks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InsertDate = new DateTime(2021, 5, 9, 17, 33, 6, 930, DateTimeKind.Local).AddTicks(1689),
                            IsDeleted = false,
                            Link = "23ad82tw",
                            ReferralType = 1,
                            UserId = "75625814-138e-4831-a1ea-bf58e211acmf"
                        },
                        new
                        {
                            Id = 2,
                            InsertDate = new DateTime(2021, 5, 9, 17, 33, 6, 934, DateTimeKind.Local).AddTicks(502),
                            IsDeleted = false,
                            Link = "65gh72tn",
                            ReferralType = 2,
                            UserId = "75625814-138e-4831-a1ea-bf58e211acmf"
                        },
                        new
                        {
                            Id = 3,
                            InsertDate = new DateTime(2021, 5, 9, 17, 33, 6, 934, DateTimeKind.Local).AddTicks(571),
                            IsDeleted = false,
                            Link = "29bd76db",
                            ReferralType = 1,
                            UserId = "75625814-138e-4831-a1ea-bf58e211adff"
                        },
                        new
                        {
                            Id = 4,
                            InsertDate = new DateTime(2021, 5, 9, 17, 33, 6, 934, DateTimeKind.Local).AddTicks(590),
                            IsDeleted = false,
                            Link = "91tm83ps",
                            ReferralType = 2,
                            UserId = "75625814-138e-4831-a1ea-bf58e211adff"
                        });
                });

            modelBuilder.Entity("GlobalBusiness.Core.Entities.ReferralTree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChildNodeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ParentNodeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ReferralType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChildNodeId");

                    b.HasIndex("ParentNodeId");

                    b.ToTable("ReferralTree");
                });

            modelBuilder.Entity("GlobalBusiness.Core.Entities.RoleMenuPermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NavigationMenuId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "NavigationMenuId");

                    b.HasIndex("NavigationMenuId");

                    b.ToTable("AspNetRoleMenuPermission");

                    b.HasData(
                        new
                        {
                            RoleId = "29bd76db-5835-406d-ad1d-7a0901448abd",
                            NavigationMenuId = 1
                        },
                        new
                        {
                            RoleId = "29bd76db-5835-406d-ad1d-7a0901448abd",
                            NavigationMenuId = 2
                        },
                        new
                        {
                            RoleId = "29bd76db-5835-406d-ad1d-7a0901448abd",
                            NavigationMenuId = 3
                        },
                        new
                        {
                            RoleId = "29bd76db-5835-406d-ad1d-7a0901448abd",
                            NavigationMenuId = 4
                        },
                        new
                        {
                            RoleId = "29bd76db-5835-406d-ad1d-7a0901448abd",
                            NavigationMenuId = 5
                        },
                        new
                        {
                            RoleId = "29bd76db-5835-406d-ad1d-7a0901448abd",
                            NavigationMenuId = 6
                        });
                });

            modelBuilder.Entity("GlobalBusiness.Core.Entities.SystemParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertUser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SystemParameters");
                });

            modelBuilder.Entity("GlobalBusiness.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("LastName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "75625814-138e-4831-a1ea-bf58e211adff",
                            AccessFailedCount = 0,
                            Avatar = "user-avatar.png",
                            ConcurrencyStamp = "a6c761ab-0e2c-4125-bd33-ca4f0eaa798b",
                            Email = "Admin@Admin.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEMXnXHgkDRpiYVJummuDH+KAAcAMN9jkyvVcjJL+PXwwD+BJq3nbgT8uKNVu47J69w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f35dec09-8c3a-44a2-a5aa-c44a6a9dabe5",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "75625814-138e-4831-a1ea-bf58e211acmf",
                            AccessFailedCount = 0,
                            Avatar = "user-avatar.png",
                            ConcurrencyStamp = "59a87a8b-9036-4092-bb5f-e1d555f48431",
                            Email = "Superuser@Superuser.com",
                            EmailConfirmed = false,
                            FirstName = "Superuser",
                            LastName = "Superuser",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERUSER@SUPERUSER.COM",
                            NormalizedUserName = "SUPERUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEDR+cz/7MzDjrppqfAThlLT/L9ympMG/wLF1nzvrNFZ5G8/jwLMSCV26Pa8ESElNXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef285669-e586-4f4e-97d4-f456e13ade95",
                            TwoFactorEnabled = false,
                            UserName = "Superuser"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "29bd76db-5835-406d-ad1d-7a0901447c18",
                            ConcurrencyStamp = "e5f87b98-9296-4643-ba8a-8fde3e07e492",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "d7be43da-622c-4cfe-98a9-5a5161120d24",
                            ConcurrencyStamp = "7fd2227c-7501-43e8-b16e-0cd05697f9d2",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "29bd76db-5835-406d-ad1d-7a0901448abd",
                            ConcurrencyStamp = "70326d87-7a2d-4beb-9f7d-488a8a08c7af",
                            Name = "Superuser",
                            NormalizedName = "SUPERUSER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "75625814-138e-4831-a1ea-bf58e211adff",
                            RoleId = "29bd76db-5835-406d-ad1d-7a0901447c18"
                        },
                        new
                        {
                            UserId = "75625814-138e-4831-a1ea-bf58e211acmf",
                            RoleId = "29bd76db-5835-406d-ad1d-7a0901448abd"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GlobalBusiness.Core.Entities.NavigationMenu", b =>
                {
                    b.HasOne("GlobalBusiness.Core.Entities.NavigationMenu", "ParentNavigationMenu")
                        .WithMany()
                        .HasForeignKey("ParentMenuId");

                    b.Navigation("ParentNavigationMenu");
                });

            modelBuilder.Entity("GlobalBusiness.Core.Entities.ReferralLink", b =>
                {
                    b.HasOne("GlobalBusiness.Core.Entities.User", "User")
                        .WithMany("ReferralLinks")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GlobalBusiness.Core.Entities.ReferralTree", b =>
                {
                    b.HasOne("GlobalBusiness.Core.Entities.User", "ChildNode")
                        .WithMany("ReferralTreeAsChild")
                        .HasForeignKey("ChildNodeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GlobalBusiness.Core.Entities.User", "ParentNode")
                        .WithMany("ReferralTreeAsParent")
                        .HasForeignKey("ParentNodeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ChildNode");

                    b.Navigation("ParentNode");
                });

            modelBuilder.Entity("GlobalBusiness.Core.Entities.RoleMenuPermission", b =>
                {
                    b.HasOne("GlobalBusiness.Core.Entities.NavigationMenu", "NavigationMenu")
                        .WithMany()
                        .HasForeignKey("NavigationMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NavigationMenu");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GlobalBusiness.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GlobalBusiness.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GlobalBusiness.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GlobalBusiness.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GlobalBusiness.Core.Entities.User", b =>
                {
                    b.Navigation("ReferralLinks");

                    b.Navigation("ReferralTreeAsChild");

                    b.Navigation("ReferralTreeAsParent");
                });
#pragma warning restore 612, 618
        }
    }
}
